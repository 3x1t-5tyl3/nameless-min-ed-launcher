name: CI

on: push
env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  LANG: en_US.utf8
jobs:
  build:
    strategy:
      matrix:
        kind: ['linux', 'windows']
        include:
          - kind: linux
            os: ubuntu-latest
            target: linux-x64
            config: Release
          - kind: windows
            os: windows-latest
            target: win10-x64
            config: ReleaseWindows
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'
          
      - name: Restore
        run: dotnet restore -r ${{ matrix.target }}
        
      - name: Build
        run: dotnet build -c ${{ matrix.config }} --no-restore
        
      - name: Test
        run: dotnet test -c ${{ matrix.config }} --no-build
      
      - name: Version
        id: version
        shell: bash
        run: |
          echo ::set-output name=version-suffix::$(echo "ci$GITHUB_RUN_ID")
          echo ::set-output name=version::$(echo "$(grep -oPm1 "(?<=<VersionPrefix>)[^<]+" src/Directory.Build.props)-ci$GITHUB_RUN_ID")
          
      - name: Publish
        shell: bash
        run: |
          target="${{ matrix.target }}"
          release_name="min-ed-launcher_v${{ steps.version.outputs.version }}_$target"
          dotnet publish src/MinEdLauncher/MinEdLauncher.fsproj -r "$target" --self-contained true -o "artifacts/$release_name" -c ${{ matrix.config }} -p:PublishSingleFile=true -p:VersionSuffix=${{ steps.version.outputs.version-suffix }}

      - name: Install Rust
        if: ${{ matrix.target == 'win10-x64' }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: clippy, rustfmt, cargo-edit
          
      - name: Run cargo clippy
        if: ${{ matrix.target == 'win10-x64' }}
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings
            
      - name: Run cargo fmt
        if: ${{ matrix.target == 'win10-x64' }}
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
            
      - name: Set Bootstrap Version
        if: ${{ matrix.target == 'win10-x64' }}
        uses: actions-rs/cargo@v1
        with:
          command: set-version
          args: ${{ steps.version.outputs.version }}${{ steps.version.outputs.version-suffix }}
            
      - name: Publish Bootstrap
        if: ${{ matrix.target == 'win10-x64' }}
        shell: bash
        run: |
          target="${{ matrix.target }}"
          release_name="min-ed-launcher_v${{ steps.version.outputs.version }}_$target"
          cargo build --release
          mv target/release/bootstrap.exe "artifacts/$release_name/MinEdLauncher.Boostrap.exe"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: min-ed-launcher_${{ steps.version.outputs.version }}_${{ matrix.target }}
          path: "artifacts/*${{ matrix.target }}*/"